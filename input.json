{
    "title": "RSKJ JSON-RPC APIs",
    "description": "This documentation contains information above the JSON RPC methods available in a RSK Node and how to use them.\nIt also contains an interactive option where you have the choice of running an actual request from within the documentation.",
    "methodDetails": [
        {
            "method": "eth_getBlockByNumber",
            "description": "Returns information about a block by the block number.",
            "summary": "Returns information about a block by the block number.",
            "methodType": "READ",
            "requestDetails": {
                "inputParams": [
                    [
                        {
                            "parameterName": "bnOrId",
                            "description": "integer of a block number, or the string 'earliest', 'latest' or 'pending', as in the default block parameter.",
                            "modelKey": null
                        }
                    ],
                    [
                        {
                            "parameterName": "fullTransactionObjects",
                            "description": "If true it returns the full transaction objects, if false only the hashes of the transactions.",
                            "modelKey": null
                        }
                    ]
                ],
                "requestExamples": [
                    "{ \"params\": [\"0x1b4\", true] }\n"
                ],
                "schema": {
                    "$schema": "http://json-schema.org/draft-04/schema#",
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer"
                        },
                        "jsonrpc": {
                            "type": "string"
                        },
                        "method": {
                            "type": "string"
                        },
                        "params": {
                            "type": "array",
                            "items": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "boolean"
                                }
                            ]
                        }
                    },
                    "required": [
                        "id",
                        "jsonrpc",
                        "method",
                        "params"
                    ]
                }
            },
            "responseDetails": [
                {
                    "code": "Success",
                    "success": true,
                    "httpCode": 200,
                    "description": "**Object** - A block object, or null when no block was found:\n- **number**: **QUANTITY** - the block number. null when its pending block.\n- **hash**: **DATA**, 32 Bytes - hash of the block. null when its pending block.\n- **parentHash**: **DATA**, 32 Bytes - hash of the parent block.\n- **nonce**: **DATA**, 8 Bytes - hash of the generated proof-of-work. null when its pending block.\n- **sha3Uncles**: **DATA**, 32 Bytes - SHA3 of the uncles data in the block.\n- **logsBloom**: **DATA**, 256 Bytes - the bloom filter for the logs of the block. null when its pending block.\n- **transactionsRoot**: **DATA**, 32 Bytes - the root of the transaction trie of the block.\n- **stateRoot**: **DATA**, 32 Bytes - the root of the final state trie of the block.\n- **receiptsRoot**: **DATA**, 32 Bytes - the root of the receipts trie of the block.\n- **miner**: **DATA**, 20 Bytes - the address of the beneficiary to whom the mining rewards were given.\n- **difficulty**: **QUANTITY** - integer of the difficulty for this block.\n- **cumulativeDifficulty**: **QUANTITY** - integer of the difficulty for this block plus its uncles’ difficulties.\n- **totalDifficulty**: **QUANTITY** - integer of the total difficulty of the chain until this block.\n- **extraData**: **DATA** - the “extra data” field of this block.\n- **size**: **QUANTITY** - integer the size of this block in bytes.\n- **gasLimit**: **QUANTITY** - the maximum gas allowed in this block.\n- **gasUsed**: **QUANTITY** - the total used gas by all transactions in this block.\n- **timestamp**: **QUANTITY** - the unix timestamp for when the block was collated.\n- **transactions**: **Array** - Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter.\n- **uncles**: **Array** - Array of uncle hashes.\n",
                    "responseExample": "{\"result\":{\"number\":\"0x1b4\",\"hash\":\"0xf1652d8322a880e520f996f7d28b645814a58a202d7d2ab7f058e5566fe4f9f3\",\"parentHash\":\"0x9203a97b2595a44e8d31dd7bf607155620dd50982ac282fc776e21a58b2f7795\",\"sha3Uncles\":\"0x2f752c2e72d38f3677bfa47bd54ec10441141a6415f3be121341d94276dfd732\",\"logsBloom\":\"0xtransactionsRoot\":\"0xe94962ab91fe305207670ca17d958ce15bdd553aa6630eba07476c0f35a65b50\",\"stateRoot\":\"0xa12e5b995ec8056d6c2d2558c6f4e1ab7f0d6d3eaed868e84c00923cf58bb642\",\"receiptsRoot\":\"0x2cdc6fdc519baad55c4f9d86d1415dbfe21265c6b2ba1f283e1391e015735c42\",\"miner\":\"0x1fab9a0e24ffc209b01faa5a61ad4366982d0b7f\",\"difficulty\":\"0x1aa2b738\",\"totalDifficulty\":\"0x1f61daa8d6\",\"extraData\":\"0x\",\"size\":\"0xafe\",\"gasLimit\":\"0x67c280\",\"gasUsed\":\"0x0\",\"timestamp\":\"0x5d1f7c06\",\"transactions\":[{\"hash\":\"0x05140aca6b0312a2d7dce35a3227b86b8a973fc69e508c5d4beb2b3c88fa28a1\",\"nonce\":\"0x01b3\",\"blockHash\":\"0xf1652d8322a880e520f996f7d28b645814a58a202d7d2ab7f058e5566fe4f9f3\",\"blockNumber\":\"0x1b4\",\"transactionIndex\":\"0x0\",\"from\":\"0x0000000000000000000000000000000000000000\",\"to\":\"0x0000000000000000000000000000000001000008\",\"gas\":\"0x0\",\"gasPrice\":\"0x0\",\"value\":\"0x0\",\"input\":\"0x\",\"v\":null,\"r\":null,\"s\":null}],\"uncles\":[\"0x6d12270d24b591931974b75c1a753d1db8c22372baf1aaaa79253858caeed52b\",\"0x9ea21e7d69ffb54face62769a04b08434d606a40c12e1348c4da348d91a9f5e4\"],\"minimumGasPrice\":\"0x0\",\"bitcoinMergedMiningHeader\":\"0x000000202d17c9a169c4c93eaf376bc35ff6561d0b743880600f3d8370020000000000008d31ad07fc72224ddd23632463f2119d977defc86f1b0ebf16171225bf9c316c117c1f5d531d041a8046d09f\",\"bitcoinMergedMiningCoinbaseTransaction\":\"0x000000000000008075aec68cfceb2bda1dcc166c1564517793f90ee07fcd446699d440628290564f6088ac0000000000000000266a24aa21a9ed08ade7f48a09603efcf910361380e3ce1ebc9813eb4a7d85473a9c170d79017e00000000000000002a6a52534b424c4f434b3ac4d2419792f08338d4fa5fd21c61ad79484c875f1ac9b483f253842edb96c92400000000\",\"bitcoinMergedMiningMerkleProof\":\"0x91062f54a2ea641bebaa19e4d58df522a395bc89e6e230f98cc343d39a8deb070f190492c042ea5ebb75f6e9488345eedf5ff35219fd3ac21be0778e7feed9fc117db6cd70f02ddc5635577981626db173937a041ae38c9cebd10e645fd4ddc00d8662b4bbb4e4309ff07fb30ca6c3365bea0f823a5fe83f60750a3b0f62da5ec8ca82637afafe9869ecfdb26e5136c849080b46f6230090773949a1010a91ce82b1c65d92f57836e28e9f2f90133d4dc2376ea337bd76836058e5cc9ae6975e6211f67ff7f76793b2f505a621ef7c1f90f0f4d4badc62aaa70a20f223160961\",\"hashForMergedMining\":\"0xc4d2419792f08338d4fa5fd21c61ad79484c875f1ac9b483f253842edb96c924\",\"paidFees\":\"0x0\",\"cumulativeDifficulty\":\"0x4ff04782\"}}\n",
                    "modelKey": "BlockResultDTO"
                },
                {
                    "code": "Success",
                    "success": true,
                    "httpCode": 200,
                    "description": "The transaction passed in could not be found",
                    "responseExample": "{\"result\":null}\n",
                    "modelKey": null
                },
                {
                    "code": "-32602",
                    "success": false,
                    "httpCode": 500,
                    "description": "Invalid block number passed.",
                    "responseExample": "{\"jsonrpc\":\"2.0\",\"id\":34,\"error\":{\"code\":-32602,\"message\":\"invalid blocknumber 4x1b4\"}}\n",
                    "modelKey": null
                },
                {
                    "code": "-32602",
                    "success": false,
                    "httpCode": 500,
                    "description": "Method parameters invalid.",
                    "responseExample": "{\n  \"error\": {\n        \"code\": -32602,\n        \"message\": \"method parameters invalid\"\n    }\n}\n",
                    "modelKey": null
                },
                {
                    "code": "-32603",
                    "success": false,
                    "httpCode": 500,
                    "description": "Something unexpected happened.",
                    "responseExample": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 34,\n    \"error\": {\n        \"code\": -32603,\n        \"message\": \"Internal server error\"\n    }\n}",
                    "modelKey": null
                }
            ],
            "responseSchema": {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "type": "object",
                "properties": {
                    "result": {
                        "type": "object",
                        "properties": {
                            "number": {
                                "type": "string"
                            },
                            "hash": {
                                "type": "string"
                            },
                            "parentHash": {
                                "type": "string"
                            },
                            "sha3Uncles": {
                                "type": "string"
                            },
                            "logsBloom": {
                                "type": "string"
                            },
                            "transactionsRoot": {
                                "type": "string"
                            },
                            "stateRoot": {
                                "type": "string"
                            },
                            "receiptsRoot": {
                                "type": "string"
                            },
                            "miner": {
                                "type": "string"
                            },
                            "difficulty": {
                                "type": "string"
                            },
                            "totalDifficulty": {
                                "type": "string"
                            },
                            "extraData": {
                                "type": "string"
                            },
                            "size": {
                                "type": "string"
                            },
                            "gasLimit": {
                                "type": "string"
                            },
                            "gasUsed": {
                                "type": "string"
                            },
                            "timestamp": {
                                "type": "string"
                            },
                            "transactions": {
                                "type": "array",
                                "items": [
                                    {
                                        "type": "object",
                                        "properties": {
                                            "hash": {
                                                "type": "string"
                                            },
                                            "nonce": {
                                                "type": "string"
                                            },
                                            "blockHash": {
                                                "type": "string"
                                            },
                                            "blockNumber": {
                                                "type": "string"
                                            },
                                            "transactionIndex": {
                                                "type": "string"
                                            },
                                            "from": {
                                                "type": "string"
                                            },
                                            "to": {
                                                "type": "string"
                                            },
                                            "gas": {
                                                "type": "string"
                                            },
                                            "gasPrice": {
                                                "type": "string"
                                            },
                                            "value": {
                                                "type": "string"
                                            },
                                            "input": {
                                                "type": "string"
                                            },
                                            "v": {
                                                "type": "null"
                                            },
                                            "r": {
                                                "type": "null"
                                            },
                                            "s": {
                                                "type": "null"
                                            }
                                        },
                                        "required": [
                                            "hash",
                                            "nonce",
                                            "blockHash",
                                            "blockNumber",
                                            "transactionIndex",
                                            "from",
                                            "to",
                                            "gas",
                                            "gasPrice",
                                            "value",
                                            "input",
                                            "v",
                                            "r",
                                            "s"
                                        ]
                                    }
                                ]
                            },
                            "uncles": {
                                "type": "array",
                                "items": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "minimumGasPrice": {
                                "type": "string"
                            },
                            "bitcoinMergedMiningHeader": {
                                "type": "string"
                            },
                            "bitcoinMergedMiningCoinbaseTransaction": {
                                "type": "string"
                            },
                            "bitcoinMergedMiningMerkleProof": {
                                "type": "string"
                            },
                            "hashForMergedMining": {
                                "type": "string"
                            },
                            "paidFees": {
                                "type": "string"
                            },
                            "cumulativeDifficulty": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "number",
                            "hash",
                            "parentHash",
                            "sha3Uncles",
                            "logsBloom",
                            "transactionsRoot",
                            "stateRoot",
                            "receiptsRoot",
                            "miner",
                            "difficulty",
                            "totalDifficulty",
                            "extraData",
                            "size",
                            "gasLimit",
                            "gasUsed",
                            "timestamp",
                            "transactions",
                            "uncles",
                            "minimumGasPrice",
                            "bitcoinMergedMiningHeader",
                            "bitcoinMergedMiningCoinbaseTransaction",
                            "bitcoinMergedMiningMerkleProof",
                            "hashForMergedMining",
                            "paidFees",
                            "cumulativeDifficulty"
                        ]
                    }
                },
                "required": [
                    "result"
                ]
            }
        },
        {
            "method": "eth_getCode",
            "description": "Returns the code at a given address.",
            "summary": "Returns the code at a given address.",
            "methodType": "READ",
            "requestDetails": {
                "inputParams": [
                    [
                        {
                            "parameterName": "address",
                            "description": "**DATA**, 20 Bytes - address.",
                            "modelKey": null
                        }
                    ],
                    [
                        {
                            "parameterName": "blockId",
                            "description": "**QUANTITY | TAG** - integer block number, or the string 'latest' or 'earliest'.",
                            "modelKey": null
                        }
                    ]
                ],
                "requestExamples": [
                    "{ \"params\": [\"0xB93b6839f49e45b115fbc9bE8379D3425156C96C\", \"latest\"] }\n"
                ],
                "schema": {
                    "$schema": "http://json-schema.org/draft-04/schema#",
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer"
                        },
                        "jsonrpc": {
                            "type": "string"
                        },
                        "method": {
                            "type": "string"
                        },
                        "params": {
                            "type": "array",
                            "items": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "required": [
                        "id",
                        "jsonrpc",
                        "method",
                        "params"
                    ]
                }
            },
            "responseDetails": [
                {
                    "code": "Success",
                    "success": true,
                    "httpCode": 200,
                    "description": "The code present in the address",
                    "responseExample": "{\n  \"result\": \"0x6080604052600436106100ba576000357c806306fdde03146100bf578063095ea7b31461014f57806318160ddd146101b457806323b872dd146101df578063313ce567146102645780634000aea014610295578063661884631461034057806370a08231146103a557806395d89b41146103fc578063a9059cbb1461048c578063d73dd623146104f1578063dd62ed3e14610556575b600080fd5b3480156100cb57600080fd5b506100d46105cd565b604051808060200182810382528....\"\n}\n",
                    "modelKey": null
                },
                {
                    "code": "-32602",
                    "success": true,
                    "httpCode": 200,
                    "description": "Method parameters invalid.",
                    "responseExample": "{\n  \"error\": {\n        \"code\": -32602,\n        \"message\": \"method parameters invalid\"\n    }\n}\n",
                    "modelKey": null
                },
                {
                    "code": "-32603",
                    "success": true,
                    "httpCode": 200,
                    "description": "Something unexpected happened.",
                    "responseExample": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 34,\n    \"error\": {\n        \"code\": -32603,\n        \"message\": \"Internal server error\"\n    }\n}",
                    "modelKey": null
                }
            ],
            "responseSchema": null
        },
        {
            "method": "debug_traceTransaction",
            "description": "The traceTransaction debugging method will attempt to run the transaction in the exact same manner as it was executed on the network. It will replay any transaction that may have been executed prior to this one before it will finally attempt to execute the transaction that corresponds to the given hash.",
            "summary": "Executes a new message call immediately without creating a transaction on the block chain.",
            "methodType": "READ",
            "requestDetails": {
                "inputParams": [
                    [
                        {
                            "parameterName": "transactionHash",
                            "description": "**TAG** - the hash of the transaction",
                            "modelKey": null
                        }
                    ],
                    [
                        {
                            "parameterName": "traceOptions",
                            "description": "While the input parameter of type JSON {string: string} is allowed, the params are ignored",
                            "modelKey": null
                        }
                    ]
                ],
                "requestExamples": [
                    "{ \"params\": [\n  \"0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b\",\n  {}\n] }\n"
                ],
                "schema": {
                    "$schema": "http://json-schema.org/draft-04/schema#",
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer"
                        },
                        "jsonrpc": {
                            "type": "string"
                        },
                        "method": {
                            "type": "string"
                        },
                        "params": {
                            "type": "array",
                            "items": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "object"
                                }
                            ]
                        }
                    },
                    "required": [
                        "id",
                        "jsonrpc",
                        "method",
                        "params"
                    ]
                }
            },
            "responseDetails": [
                {
                    "code": "Success",
                    "success": true,
                    "httpCode": 200,
                    "description": "**DATA** - the return value of executed contract.",
                    "responseExample": "{\"result\": \"0x2\"}\n",
                    "modelKey": null
                },
                {
                    "code": "-32602",
                    "success": false,
                    "httpCode": 500,
                    "description": "Method parameters invalid.",
                    "responseExample": "{\n  \"error\": {\n        \"code\": -32602,\n        \"message\": \"method parameters invalid\"\n    }\n}\n",
                    "modelKey": null
                },
                {
                    "code": "-32603",
                    "success": false,
                    "httpCode": 500,
                    "description": "Something unexpected happened.",
                    "responseExample": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 34,\n    \"error\": {\n        \"code\": -32603,\n        \"message\": \"Internal server error\"\n    }\n}",
                    "modelKey": null
                }
            ],
            "responseSchema": null
        },
        {
            "method": "eth_getBalance",
            "description": "Returns the balance of the account of given address.",
            "summary": "Returns the balance of the account of given address.",
            "methodType": "READ",
            "requestDetails": {
                "inputParams": [
                    [
                        {
                            "parameterName": "address",
                            "description": "**DATA**, 20 Bytes - address to check for balance.",
                            "modelKey": null
                        }
                    ],
                    [
                        {
                            "parameterName": "block",
                            "description": "**QUANTITY|TAG** - integer block number, or the string 'latest', 'earliest' or 'pending', see the default block parameter",
                            "modelKey": null
                        }
                    ]
                ],
                "requestExamples": [
                    "{ \"params\": [\"0xc94770007dda54cF92009BFF0dE90c06F603a09f\", \"latest\"] }\n"
                ],
                "schema": {
                    "$schema": "http://json-schema.org/draft-04/schema#",
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer"
                        },
                        "jsonrpc": {
                            "type": "string"
                        },
                        "method": {
                            "type": "string"
                        },
                        "params": {
                            "type": "array",
                            "items": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "required": [
                        "id",
                        "jsonrpc",
                        "method",
                        "params"
                    ]
                }
            },
            "responseDetails": [
                {
                    "code": "Success",
                    "success": true,
                    "httpCode": 200,
                    "description": "**QUANTITY** - integer of the current balance in wei.",
                    "responseExample": "{\"result\": \"0x0234c8a3397aab58\"}\n",
                    "modelKey": null
                },
                {
                    "code": "-32602",
                    "success": false,
                    "httpCode": 500,
                    "description": "Method parameters invalid.",
                    "responseExample": "{\n  \"error\": {\n        \"code\": -32602,\n        \"message\": \"method parameters invalid\"\n    }\n}\n",
                    "modelKey": null
                },
                {
                    "code": "-32603",
                    "success": false,
                    "httpCode": 500,
                    "description": "Something unexpected happened.",
                    "responseExample": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 34,\n    \"error\": {\n        \"code\": -32603,\n        \"message\": \"Internal server error\"\n    }\n}",
                    "modelKey": null
                }
            ],
            "responseSchema": null
        },
        {
            "method": "eth_sendTransaction",
            "description": "Creates new message call transaction or a contract creation, if the data field contains code.",
            "summary": "Creates new message call transaction or a contract creation.",
            "methodType": "WRITE",
            "requestDetails": {
                "inputParams": [
                    [
                        {
                            "parameterName": "transaction",
                            "description": "**Object** - The transaction object\n  - **from**: DATA, 20 Bytes - The address the transaction is send from.\n  - **to**: DATA, 20 Bytes - (optional when creating new contract) The address the transaction is directed to.\n  - **gas**: QUANTITY - (optional, default: 90000) Integer of the gas provided for the transaction execution. It will return unused gas.\n  - **gasPrice**: QUANTITY - (optional, default: To-Be-Determined) Integer of the gasPrice used for each paid gas\n  - **value**: QUANTITY - (optional) Integer of the value sent with this transaction\n  - **data**: DATA - The compiled code of a contract OR the hash of the invoked method signature and encoded parameters. For details see Ethereum Contract ABI\n  - **nonce**: QUANTITY - (optional) Integer of a nonce. This allows to overwrite your own pending transactions that use the same nonce.\n",
                            "modelKey": null
                        }
                    ]
                ],
                "requestExamples": [
                    "{ \"params\": [{\n  \"from\": \"0xb60e8dd61c5d32be8058bb8eb970870f07233155\",\n  \"to\": \"0xd46e8dd67c5d32be8058bb8eb970870f07244567\",\n  \"gas\": \"0x76c0\",\n  \"gasPrice\": \"0x9184e72a000\",\n  \"value\": \"0x9184e72a\",\n  \"data\": \"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675\"\n}] }\n"
                ],
                "schema": {
                    "$schema": "http://json-schema.org/draft-04/schema#",
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer"
                        },
                        "jsonrpc": {
                            "type": "string"
                        },
                        "method": {
                            "type": "string"
                        },
                        "params": {
                            "type": "array",
                            "items": [
                                {
                                    "type": "object",
                                    "properties": {
                                        "from": {
                                            "type": "string"
                                        },
                                        "to": {
                                            "type": "string"
                                        },
                                        "gas": {
                                            "type": "string"
                                        },
                                        "gasPrice": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "string"
                                        },
                                        "data": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "from",
                                        "to",
                                        "gas",
                                        "gasPrice",
                                        "value",
                                        "data"
                                    ]
                                }
                            ]
                        }
                    },
                    "required": [
                        "id",
                        "jsonrpc",
                        "method",
                        "params"
                    ]
                }
            },
            "responseDetails": [
                {
                    "code": "Success",
                    "success": true,
                    "httpCode": 200,
                    "description": "**DATA**, 32 Bytes - the transaction hash, or the zero hash if the transaction is not yet available.\\nUse eth_getTransactionReceipt to get the contract address, after the transaction was mined, when you created a contract.",
                    "responseExample": "{\n  \"result\": \"0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331\"\n}\n",
                    "modelKey": null
                },
                {
                    "code": "-32602",
                    "success": false,
                    "httpCode": 500,
                    "description": "Method parameters invalid.",
                    "responseExample": "{\n  \"error\": {\n        \"code\": -32602,\n        \"message\": \"method parameters invalid\"\n    }\n}\n",
                    "modelKey": null
                },
                {
                    "code": "-32603",
                    "success": false,
                    "httpCode": 500,
                    "description": "Something unexpected happened.",
                    "responseExample": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 34,\n    \"error\": {\n        \"code\": -32603,\n        \"message\": \"Internal server error\"\n    }\n}",
                    "modelKey": null
                }
            ],
            "responseSchema": null
        },
        {
            "method": "net_peerCount",
            "description": "Returns number of peers currently connected to the client.",
            "summary": "Returns number of peers currently connected to the client.",
            "methodType": "READ",
            "requestDetails": {
                "inputParams": [],
                "requestExamples": [],
                "schema": {
                    "$schema": "http://json-schema.org/draft-04/schema#",
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer"
                        },
                        "jsonrpc": {
                            "type": "string"
                        },
                        "method": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "id",
                        "jsonrpc",
                        "method"
                    ]
                }
            },
            "responseDetails": [
                {
                    "code": "Success",
                    "success": true,
                    "httpCode": 200,
                    "description": "integer of the number of connected peers.",
                    "responseExample": "{\"result\": \"0x2\"}\n",
                    "modelKey": null
                },
                {
                    "code": "-32602",
                    "success": true,
                    "httpCode": 200,
                    "description": "The method parameters passed in was invalid",
                    "responseExample": "{\n  \"error\": {\n        \"code\": -32602,\n        \"message\": \"method parameters invalid\"\n    }\n}\n",
                    "modelKey": null
                },
                {
                    "code": "-32603",
                    "success": true,
                    "httpCode": 200,
                    "description": "Something unexpected happened.",
                    "responseExample": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 34,\n    \"error\": {\n        \"code\": -32603,\n        \"message\": \"Internal server error\"\n    }\n}",
                    "modelKey": null
                }
            ],
            "responseSchema": null
        },
        {
            "method": "web3_sha3",
            "description": "Returns Keccak-256 (not the standardized SHA3-256) of the given data.",
            "summary": "Returns Keccak-256 (not the standardized SHA3-256) of the given data.",
            "methodType": "READ",
            "requestDetails": {
                "inputParams": [
                    [
                        {
                            "parameterName": "data",
                            "description": "the data to convert into a SHA3 hash.",
                            "modelKey": null
                        }
                    ]
                ],
                "requestExamples": [
                    "{ \"params\": [\"0x68656c6c6f20776f726c64\"] }\n"
                ],
                "schema": {
                    "$schema": "http://json-schema.org/draft-04/schema#",
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer"
                        },
                        "jsonrpc": {
                            "type": "string"
                        },
                        "method": {
                            "type": "string"
                        },
                        "params": {
                            "type": "array",
                            "items": [
                                {
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "required": [
                        "id",
                        "jsonrpc",
                        "method",
                        "params"
                    ]
                }
            },
            "responseDetails": [
                {
                    "code": "Success",
                    "success": true,
                    "httpCode": 200,
                    "description": "The SHA3 result of the given string.",
                    "responseExample": "{\"result\": \"0x5b2c76da96136d193336fad3fbc049867b8ca157da22f69ae0e4923648250acc\"}\n",
                    "modelKey": null
                },
                {
                    "code": "-32602",
                    "success": false,
                    "httpCode": 500,
                    "description": "The method parameters passed in was invalid",
                    "responseExample": "{\n  \"error\": {\n        \"code\": -32602,\n        \"message\": \"method parameters invalid\"\n    }\n}\n",
                    "modelKey": null
                },
                {
                    "code": "-32603",
                    "success": false,
                    "httpCode": 500,
                    "description": "Something unexpected happened.",
                    "responseExample": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 34,\n    \"error\": {\n        \"code\": -32603,\n        \"message\": \"Internal server error\"\n    }\n}",
                    "modelKey": null
                }
            ],
            "responseSchema": null
        },
        {
            "method": "eth_sendRawTransaction",
            "description": "Creates new message call transaction or a contract creation for signed transactions.",
            "summary": "Creates new message call transaction or a contract creation.",
            "methodType": "WRITE",
            "requestDetails": {
                "inputParams": [
                    [
                        {
                            "parameterName": "rawData",
                            "description": "**DATA**, The signed transaction data.",
                            "modelKey": null
                        }
                    ]
                ],
                "requestExamples": [
                    "{ \"params\": [{\n  \"from\": \"0xb60e8dd61c5d32be8058bb8eb970870f07233155\",\n  \"to\": \"0xd46e8dd67c5d32be8058bb8eb970870f07244567\",\n  \"gas\": \"0x76c0\",\n  \"gasPrice\": \"0x9184e72a000\",\n  \"value\": \"0x9184e72a\",\n  \"data\": \"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675\"\n}] }\n"
                ],
                "schema": {
                    "$schema": "http://json-schema.org/draft-04/schema#",
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer"
                        },
                        "jsonrpc": {
                            "type": "string"
                        },
                        "method": {
                            "type": "string"
                        },
                        "params": {
                            "type": "array",
                            "items": [
                                {
                                    "type": "object",
                                    "properties": {
                                        "from": {
                                            "type": "string"
                                        },
                                        "to": {
                                            "type": "string"
                                        },
                                        "gas": {
                                            "type": "string"
                                        },
                                        "gasPrice": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "string"
                                        },
                                        "data": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "from",
                                        "to",
                                        "gas",
                                        "gasPrice",
                                        "value",
                                        "data"
                                    ]
                                }
                            ]
                        }
                    },
                    "required": [
                        "id",
                        "jsonrpc",
                        "method",
                        "params"
                    ]
                }
            },
            "responseDetails": [
                {
                    "code": "Success",
                    "success": true,
                    "httpCode": 200,
                    "description": "**DATA**, 32 Bytes - the transaction hash, or the zero hash if the transaction is not yet available.\\nUse eth_getTransactionReceipt to get the contract address, after the transaction was mined, when you created a contract.",
                    "responseExample": "{\n  \"result\": \"0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331\"\n}\n",
                    "modelKey": null
                },
                {
                    "code": "-32602",
                    "success": true,
                    "httpCode": 200,
                    "description": "Method parameters invalid.",
                    "responseExample": "{\n  \"error\": {\n        \"code\": -32602,\n        \"message\": \"method parameters invalid\"\n    }\n}\n",
                    "modelKey": null
                },
                {
                    "code": "-32603",
                    "success": true,
                    "httpCode": 200,
                    "description": "Something unexpected happened.",
                    "responseExample": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 34,\n    \"error\": {\n        \"code\": -32603,\n        \"message\": \"Internal server error\"\n    }\n}",
                    "modelKey": null
                }
            ],
            "responseSchema": null
        },
        {
            "method": "eth_call",
            "description": "Executes a new message call immediately without creating a transaction on the block chain.",
            "summary": "Executes a new message call immediately without creating a transaction on the block chain.",
            "methodType": "WRITE",
            "requestDetails": {
                "inputParams": [
                    [
                        {
                            "parameterName": "transaction",
                            "description": "**Object** - The transaction call object\n  - **from**: DATA, 20 Bytes - (optional) The address the transaction is sent from.\n  - **to**: DATA, 20 Bytes - The address the transaction is directed to.\n  - **gas**: QUANTITY - (optional) Integer of the gas provided for the transaction execution. eth_call consumes zero gas, but this parameter may be needed by some executions.\n  - **gasPrice**: QUANTITY - (optional) Integer of the gasPrice used for each paid gas\n  - **value**: QUANTITY - (optional) Integer of the value sent with this transaction\n  - **data**: DATA - (optional) Hash of the method signature and encoded parameters. For details see Ethereum Contract ABI in the Solidity documentation\n",
                            "modelKey": "CallArguments"
                        }
                    ],
                    [
                        {
                            "parameterName": "blockNumberOrId",
                            "description": "**QUANTITY|TAG** - integer block number, or the string 'latest', 'earliest' or 'pending', see the default block parameter",
                            "modelKey": null
                        }
                    ]
                ],
                "requestExamples": [
                    "{ \"params\": [{\n    \"from\": \"0xb60e8dd61c5d32be8058bb8eb970870f07233155\",\n    \"to\": \"0xd46e8dd67c5d32be8058bb8eb970870f07244567\",\n    \"gas\": \"0x76c0\",\n    \"gasPrice\": \"0x9184e72a000\",\n    \"value\": \"0x9184e72a\",\n    \"data\": \"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675\"\n  }, \"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675\"] }\n"
                ],
                "schema": {
                    "$schema": "http://json-schema.org/draft-04/schema#",
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer"
                        },
                        "jsonrpc": {
                            "type": "string"
                        },
                        "method": {
                            "type": "string"
                        },
                        "params": {
                            "type": "array",
                            "items": [
                                {
                                    "type": "object",
                                    "properties": {
                                        "from": {
                                            "type": "string"
                                        },
                                        "to": {
                                            "type": "string"
                                        },
                                        "gas": {
                                            "type": "string"
                                        },
                                        "gasPrice": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": "string"
                                        },
                                        "data": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "from",
                                        "to",
                                        "gas",
                                        "gasPrice",
                                        "value",
                                        "data"
                                    ]
                                },
                                {
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "required": [
                        "id",
                        "jsonrpc",
                        "method",
                        "params"
                    ]
                }
            },
            "responseDetails": [
                {
                    "code": "Success",
                    "success": true,
                    "httpCode": 200,
                    "description": "**DATA** - the return value of executed contract.",
                    "responseExample": "{\"result\": \"0x2\"}",
                    "modelKey": null
                },
                {
                    "code": "-32602",
                    "success": false,
                    "httpCode": 500,
                    "description": "Method parameters invalid.",
                    "responseExample": "{\n  \"error\": {\n        \"code\": -32602,\n        \"message\": \"method parameters invalid\"\n    }\n}\n",
                    "modelKey": null
                },
                {
                    "code": "-32603",
                    "success": false,
                    "httpCode": 500,
                    "description": "Something unexpected happened.",
                    "responseExample": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 34,\n    \"error\": {\n        \"code\": -32603,\n        \"message\": \"Internal server error\"\n    }\n}",
                    "modelKey": null
                }
            ],
            "responseSchema": null
        },
        {
            "method": "eth_getLogs",
            "description": "Returns an array of all logs matching a given filter object.",
            "summary": "Returns an array of all logs matching a given filter object.",
            "methodType": "READ",
            "requestDetails": {
                "inputParams": [
                    [
                        {
                            "parameterName": "filterRequest",
                            "description": "**Object** - The filter options:\n- **fromBlock**: **QUANTITY|TAG** - (optional, default: \"latest\") Integer block number, or \"latest\" for the last mined block or \"pending\", \"earliest\" for not yet mined transactions.\n- **toBlock**: **QUANTITY|TAG** - (optional, default: \"latest\") Integer block number, or \"latest\" for the last mined block or \"pending\", \"earliest\" for not yet mined transactions.\n- **address**: **DATA|Array**, 20 Bytes - (optional) Contract address or a list of addresses from which logs should originate.\n- **topics**: **Array of DATA**, - (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with “or” options.\n- **blockhash**: **DATA**, 32 Bytes - (optional) With the addition of EIP-234 (Geth >= v1.8.13 or Parity >= v2.1.0), blockHash is a new filter option which restricts the logs returned to the single block with the 32-byte hash blockHash. Using blockHash is equivalent to fromBlock = toBlock = the block number with hash blockHash. If blockHash is present in the filter criteria, then neither fromBlock nor toBlock are allowed.\n",
                            "modelKey": null
                        }
                    ]
                ],
                "requestExamples": [
                    "{ \"params\": [{\n  \"topics\": [\"0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b\"]\n}] }\n"
                ],
                "schema": {
                    "$schema": "http://json-schema.org/draft-04/schema#",
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer"
                        },
                        "jsonrpc": {
                            "type": "string"
                        },
                        "method": {
                            "type": "string"
                        },
                        "params": {
                            "type": "array",
                            "items": [
                                {
                                    "type": "object",
                                    "properties": {
                                        "topics": {
                                            "type": "array",
                                            "items": [
                                                {
                                                    "type": "string"
                                                }
                                            ]
                                        }
                                    },
                                    "required": [
                                        "topics"
                                    ]
                                }
                            ]
                        }
                    },
                    "required": [
                        "id",
                        "jsonrpc",
                        "method",
                        "params"
                    ]
                }
            },
            "responseDetails": [
                {
                    "code": "Success",
                    "success": true,
                    "httpCode": 200,
                    "description": "**Array** - Array of log objects, or an empty array if nothing has changed since last poll.\n\n- For filters created with eth_newBlockFilter the return are block hashes (DATA, 32 Bytes), e.g. [\"0x3454645634534...\"].\n- For filters created with eth_newPendingTransactionFilter the return are transaction hashes (DATA, 32 Bytes), e.g. [\"0x6345343454645...\"].\n- For filters created with eth_newFilter logs are objects with following params:\n  - removed: **TAG** - true when the log was removed, due to a chain reorganization. false if its a valid log.\n  - logIndex: **QUANTITY** - integer of the log index position in the block. null when its pending log.\n  - transactionIndex: **QUANTITY** - integer of the transactions index position log was created from. null when its pending log.\n  - transactionHash: **DATA**, 32 Bytes - hash of the transactions this log was created from. null when its pending log.\n  - blockHash: **DATA**, 32 Bytes - hash of the block where this log was in. null when its pending. null when its pending log.\n  - blockNumber: **QUANTITY** - the block number where this log was in. null when its pending. null when its pending log.\n  - address: **DATA**, 20 Bytes - address from which this log originated.\n  - data: **DATA** - contains the non-indexed arguments of the log.\n  - topics: **Array of DATA** - Array of 0 to 4 32 Bytes DATA of indexed log arguments. (In solidity: The first topic is the hash of the signature of the event (e.g. Deposit(address,bytes32,uint256)), except you declared the event with the anonymous specifier.)\n",
                    "responseExample": "{}",
                    "modelKey": null
                },
                {
                    "code": "Success",
                    "success": true,
                    "httpCode": 200,
                    "description": "The search criteria did not match any logs",
                    "responseExample": null,
                    "modelKey": null
                },
                {
                    "code": "-32602",
                    "success": false,
                    "httpCode": 500,
                    "description": "Method parameters invalid.",
                    "responseExample": "{\n  \"error\": {\n        \"code\": -32602,\n        \"message\": \"method parameters invalid\"\n    }\n}\n",
                    "modelKey": null
                },
                {
                    "code": "-32603",
                    "success": false,
                    "httpCode": 500,
                    "description": "Something unexpected happened.",
                    "responseExample": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 34,\n    \"error\": {\n        \"code\": -32603,\n        \"message\": \"Internal server error\"\n    }\n}",
                    "modelKey": null
                }
            ],
            "responseSchema": null
        }
    ],
    "models": {
        "CallArguments": "interface CallArguments {\n  from: String;\n  to: String;\n  gas: String;\n  gasPrice: String;\n  value: String;\n  data: String;\n  nonce: String;\n}",
        "BlockResultDTO": "interface BlockResultDTO {\n  number: String;\n  hash: String;\n  parentHash: String;\n  sha3Uncles: String;\n  logsBloom: String;\n  transactionsRoot: String;\n  stateRoot: String;\n  receiptsRoot: String;\n  miner: String;\n  difficulty: String;\n  totalDifficulty: String;\n  extraData: String;\n  size: String;\n  gasLimit: String;\n  gasUsed: String;\n  timestamp: String;\n  transactions: List<String> | List<TransactionResultDTO>;\n  uncles: List<String>;\n  minimumGasPrice: String;\n  bitcoinMergedMiningHeader: String;\n  bitcoinMergedMiningCoinbaseTransaction: String;\n  bitcoinMergedMiningMerkleProof: String;\n  hashForMergedMining: String;\n  paidFees: String;\n  cumulativeDifficulty: String;\n}",
        "TransactionResultDTO": "interface TransactionResultDTO {\n  hash: String;\n  nonce: String;\n  blockHash: String;\n  blockNumber: String;\n  transactionIndex: String;\n  from: String;\n  to: String;\n  gas: String;\n  gasPrice: String;\n  value: String;\n  input: String;\n  v: String;\n  r: String;\n  s: String;\n}"
    }
}